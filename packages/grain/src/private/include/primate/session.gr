module Session

from "./external.gr" include External
from "json" include Json
from "result" include Result
from "runtime/unsafe/offsets" include Offsets
from "runtime/unsafe/wasmi32" include WasmI32
from "string" include String
from "bytes" include Bytes
from "buffer" include Buffer
from "uint32" include Uint32
from "./common.gr" include Common

use Json.{ type Json }
use Offsets.{ _BYTES_DATA_OFFSET }
use WasmI32.{ (+) as (+.) }
use Common.{
  readString,
  readUint32,
  readJson,
  readBytes,
}
provide exception InvalidSessionPayload

provide record Session {
  data: Json,
  id: String,
}

let parseSessionPayload = (payload: Bytes) => {
  use Bytes.{ getUint32, slice, toString }
  use Uint32.{ toNumber, (<), (+) as (+.) }

  let offset = 0
  
  let (offset, exists) = readUint32(offset, payload)

  if (exists == 1ul) {
    let (offset, id) = readString(offset, payload)
    let (offset, data) = readJson(offset, payload)
    if (offset != Bytes.length(payload)) throw InvalidSessionPayload
    Some({
      data,
      id,
    }): Option<Session>
  } else {
    if (offset != Bytes.length(payload)) throw InvalidSessionPayload
    None: Option<Session>
  }
}

@unsafe
provide let create = (data: Json) => {
  let str = Result.expect("Invalid JSON", Json.toString(data))
  let strLength = String.byteLength(str)

  let buffer = Buffer.make(strLength + 4)
  Buffer.addUint32(Uint32.fromNumber(strLength), buffer)
  Buffer.addString(str, buffer)
  
  let bytes = Buffer.toBytes(buffer)
  let byteLength = WasmI32.fromGrain(Bytes.length(bytes))
  let ptr = WasmI32.fromGrain(bytes) +. _BYTES_DATA_OFFSET
  External.send(ptr, byteLength)
  ignore(bytes)
  
  External.sessionNew()
  let payload = External.receiveBytes()
  parseSessionPayload(payload)
}

@unsafe
provide let get = () => {
  External.sessionGet()
  let payload = External.receiveBytes()
  parseSessionPayload(payload)
}

@unsafe
provide let exists = () => {
  use WasmI32.{ (==) }
  External.sessionExists() == 1n
}

provide let set = (session: Json) => {
  External.sendJson(session)
  External.sessionSet()
}

module Response

from "uri" include Uri
from "map" include Map
from "json" include Json
from "bytes" include Bytes
from "uint64" include Uint64
from "uint32" include Uint32
from "option" include Option
from "string" include String
from "buffer" include Buffer
from "result" include Result
from "runtime/gc" include GC
from "runtime/unsafe/wasmi32" include WasmI32
from "runtime/unsafe/offsets" include Offsets
from "./external.gr" include External
from "runtime/unsafe/tags" include Tags
from "./websocket.gr" include WebSocket

use WasmI32.{ (-) as (-.), (==) as (==.), (>>) as (>>.) }
use Uint64.{ (+) as (+..) }
use Map.{ type Map }
use Json.{ type Json }
use Uri.{ type Uri }
use Offsets.{ _BYTES_DATA_OFFSET, _BYTES_LEN_OFFSET }
use WebSocket.{
  type UpgradeOpenCallback,
  type UpgradeCloseCallback,
  type UpgradeMessageCallback,
}

provide exception InvalidPayloadException

provide enum HTTPStatus {
 	Continue,
 	SwitchingProtocols,
 	Processing,
 	EarlyHints,
 	UploadResumptionSupported,
 	OK,
 	Created,
 	Accepted,
 	NonAuthoritativeInformation,
 	NoContent,
 	ResetContent,
 	PartialContent,
 	MultiStatus,
 	AlreadyReported,
 	IMUsed,
 	MultipleChoices,
 	MovedPermanently,
 	Found,
 	SeeOther,
 	NotModified,
 	UseProxy,
 	TemporaryRedirect,
 	PermanentRedirect,
 	BadRequest,
 	Unauthorized,
 	PaymentRequired,
 	Forbidden,
 	NotFound,
 	MethodNotAllowed,
 	NotAcceptable,
 	ProxyAuthenticationRequired,
 	RequestTimeout,
 	Conflict,
 	Gone,
 	LengthRequired,
 	PreconditionFailed,
 	ContentTooLarge,
 	URITooLong,
 	UnsupportedMediaType,
 	RangeNotSatisfiable,
 	ExpectationFailed,
 	MisdirectedRequest,
 	UnprocessableContent,
 	Locked,
 	FailedDependency,
 	TooEarly,
 	UpgradeRequired,
 	PreconditionRequired,
 	TooManyRequests,
 	Unassigned,
 	RequestHeaderFieldsTooLarge,
 	UnavailableForLegalReasons,
 	InternalServerError,
 	NotImplemented,
 	BadGateway,
 	ServiceUnavailable,
 	GatewayTimeout,
 	HTTPVersionNotSupported,
 	VariantAlsoNegotiates,
 	InsufficientStorage,
 	LoopDetected,
 	NotExtended,
 	NetworkAuthenticationRequired,
}

provide let getStatusCode = (status: HTTPStatus) => {
  match (status) {
    Continue => 100,
    SwitchingProtocols => 101,
    Processing => 102,
    EarlyHints => 103,
    UploadResumptionSupported => 104,
    OK => 200,
    Created => 201,
    Accepted => 202,
    NonAuthoritativeInformation => 203,
    NoContent => 204,
    ResetContent => 205,
    PartialContent => 206,
    MultiStatus => 207,
    AlreadyReported => 208,
    IMUsed => 226,
    MultipleChoices => 300,
    MovedPermanently => 301,
    Found => 302,
    SeeOther => 303,
    NotModified => 304,
    UseProxy => 305,
    TemporaryRedirect => 307,
    PermanentRedirect => 308,
    BadRequest => 400,
    Unauthorized => 401,
    PaymentRequired => 402,
    Forbidden => 403,
    NotFound => 404,
    MethodNotAllowed => 405,
    NotAcceptable => 406,
    ProxyAuthenticationRequired => 407,
    RequestTimeout => 408,
    Conflict => 409,
    Gone => 410,
    LengthRequired => 411,
    PreconditionFailed => 412,
    ContentTooLarge => 413,
    URITooLong => 414,
    UnsupportedMediaType => 415,
    RangeNotSatisfiable => 416,
    ExpectationFailed => 417,
    MisdirectedRequest => 421,
    UnprocessableContent => 422,
    Locked => 423,
    FailedDependency => 424,
    TooEarly => 425,
    UpgradeRequired => 426,
    PreconditionRequired => 428,
    TooManyRequests => 429,
    Unassigned => 430,
    RequestHeaderFieldsTooLarge => 431,
    UnavailableForLegalReasons => 451,
    InternalServerError => 500,
    NotImplemented => 501,
    BadGateway => 502,
    ServiceUnavailable => 503,
    GatewayTimeout => 504,
    HTTPVersionNotSupported => 505,
    VariantAlsoNegotiates => 506,
    InsufficientStorage => 507,
    LoopDetected => 508,
    NotExtended => 510,
    NetworkAuthenticationRequired => 511,
  }
}

provide enum SocketCloseStatus {
  NormalClosure,
  GoingAway,
  ProtocolError,
  UnsupportedData,
  Reserved,
  NoStatusRcvd,
  AbnormalClosure,
  InvalidFramePayloadData,
  PolicyViolation,
  MessageTooBig,
  MandatoryExt,
  InternalError,
  ServiceRestart,
  TryAgainLater,
  GatewayProxyError,
  TLSHandshake,
  Unauthorized,
  Forbidden,
  Timeout,
  Custom(Uint32),
}

provide let getSocketCloseStatus = (status: SocketCloseStatus) => {
  match (status) {
    NormalClosure => 1000ul,
    GoingAway => 1001ul,
    ProtocolError => 1002ul,
    UnsupportedData => 1003ul,
    Reserved => 1004ul,
    NoStatusRcvd => 1005ul,
    AbnormalClosure => 1006ul,
    InvalidFramePayloadData => 1007ul,
    PolicyViolation => 1008ul,
    MessageTooBig => 1009ul,
    MandatoryExt => 1010ul,
    InternalError => 1011ul,
    ServiceRestart => 1012ul,
    TryAgainLater => 1013ul,
    GatewayProxyError => 1014ul,
    TLSHandshake => 1015ul,
    Unauthorized => 3000ul,
    Forbidden => 3003ul,
    Timeout => 3008ul,
    Custom(code) => code,
  }
}


provide type Response = Bytes

let _RESPONSE_TEXT = 0ul
let _RESPONSE_JSON = 1ul
let _RESPONSE_BLOB = 2ul
let _RESPONSE_VIEW = 3ul
let _RESPONSE_ERROR = 4ul
let _RESPONSE_REDIRECT = 5ul
let _RESPONSE_URI = 6ul
let _RESPONSE_WEB_SOCKET_UPGRADE = 7ul

let _NONE = 0ul
let _SOME = 1ul

provide let text = (
  text: String,
  status: HTTPStatus = OK,
  headers: Map<String, String> = Map.make(),
) => {
  let textLength = String.byteLength(text)

  let headers = JsonObject(
    Map.reduce(
      (acc, key, value) => [(key, JsonString(value)), ...acc],
      [],
      headers,
    )
  )
  let headers = Result.expect("Invalid json.", Json.toString(headers))
  let headersLength = String.byteLength(headers)

  let buffer = Buffer.make(
    4 // header
    + 4 // text length
    + textLength // text payload

    + 4 // status

    + 4 // Headers string length
    + headersLength // The headers payload
  )

  // The actual text
  Buffer.addUint32(_RESPONSE_TEXT, buffer)
  Buffer.addUint32(Uint32.fromNumber(textLength), buffer)
  Buffer.addString(text, buffer)

  // status code
  let statusCode = Uint32.fromNumber(getStatusCode(status))
  Buffer.addUint32(statusCode, buffer)

  // json stringified headers
  Buffer.addUint32(Uint32.fromNumber(headersLength), buffer)
  Buffer.addString(headers, buffer)

  Buffer.toBytes(buffer)
}

provide let json = (value: Json) => {
  let str = Result.expect("Invalid JSON", Json.toString(value))
  let strLength = String.byteLength(str)
  let buffer = Buffer.make(8 + strLength)
  Buffer.addUint32(_RESPONSE_JSON, buffer)
  Buffer.addUint32(Uint32.fromNumber(strLength), buffer)
  Buffer.addString(str, buffer)
  Buffer.toBytes(buffer)
}

provide let blob = (bytes: Bytes, contentType: Option<String> = Some("application/octet-stream")) => {
  // Header: 2
  // Length: 4 + 4 + bytes length + content type length
  // Payload: bytes length bytes + content type length bytes
  let bytesLength = Bytes.length(bytes)
  let buffer = Buffer.make(
    8 + bytesLength + match (contentType) {
      Some(str) => String.byteLength(str) + 4,
      None => 0,
    }
  )
  Buffer.addUint32(_RESPONSE_BLOB, buffer)
  Buffer.addUint32(Uint32.fromNumber(bytesLength), buffer)
  Buffer.addBytes(bytes, buffer)
  match (contentType) {
    Some(str) => {
      let strLength = String.byteLength(str)
      let offset = 8 + bytesLength
      Buffer.addUint32(_SOME, buffer)
      Buffer.addUint32(Uint32.fromNumber(strLength), buffer)
      Buffer.addString(str, buffer)
    },
    None => {
      Buffer.addUint32(_NONE, buffer)
    },
  }
  Buffer.toBytes(buffer)
}

provide let view = (
  name: String,
  props: Json = Json.JsonNull,
  head: Option<String> = None,
  partial: Bool = false,
  placeholders: Map<String, String> = Map.make(),
  page: Option<String> = None,
  csp: Map<String, String> = Map.make(),
) => {
  let viewOptions = JsonObject([
    ("head", match (head) {
      Some(str) => JsonString(str),
      None => JsonNull
    }),
    ("partial", JsonBoolean(partial)),
    ("placeholders", JsonObject(
      Map.reduce(
        (acc, key, value) => [(key, JsonString(value)), ...acc],
        [],
        placeholders,
      ),
    )),
    ("page", match (page) {
      Some(str) => JsonString(str),
      None => JsonNull
    }),
    ("csp", JsonObject(
      Map.reduce(
        (acc, key, value) => [(key, JsonString(value)), ...acc],
        [],
        csp,
      ),
    )),
  ])
  let viewNameLength = String.byteLength(name)

  let propsStr = Result.expect("Invalid Json", Json.toString(props))
  let propsLength = String.byteLength(propsStr)

  let viewOptionsStr = Result.expect("Invalid Json", Json.toString(viewOptions))
  let viewOptionsLength = String.byteLength(viewOptionsStr)

  let buffer = Buffer.make(
    4 + 4 + viewNameLength + 4 + propsLength + 4 + viewOptionsLength
  )

  Buffer.addUint32(_RESPONSE_VIEW, buffer)

  // view
  Buffer.addUint32(Uint32.fromNumber(viewNameLength), buffer)
  Buffer.addString(name, buffer)

  // props
  Buffer.addUint32(Uint32.fromNumber(propsLength), buffer)
  Buffer.addString(propsStr, buffer)

  // view options
  Buffer.addUint32(Uint32.fromNumber(viewOptionsLength), buffer)
  Buffer.addString(viewOptionsStr, buffer)
  Buffer.toBytes(buffer)
}

provide let error = (
  body: Option<String> = None,
  status: HTTPStatus = NotFound,
  page: Option<String> = None,
) => {
  let buffer = Buffer.make(
    4 // header
    + 4 + match (body) { // Option + Body
      Some(str) => String.byteLength(str) + 4,
      None => 0,
    }
    + 4 // status
    + 4 + match (page) { // Option + Page
      Some(str) => String.byteLength(str) + 4,
      None => 0,
    }
  )

  Buffer.addUint32(_RESPONSE_ERROR, buffer)

  // body
  match (body) {
    Some(str) => {
      Buffer.addUint32(_SOME, buffer)
      Buffer.addUint32(Uint32.fromNumber(String.byteLength(str)), buffer)
      Buffer.addString(str, buffer)
    },
    None => {
      Buffer.addUint32(_NONE, buffer)
    }
  }

  // status
  Buffer.addUint32(Uint32.fromNumber(getStatusCode(status)), buffer)

  // page
  match (page) {
    Some(str) => {
      Buffer.addUint32(_SOME, buffer)
      Buffer.addUint32(Uint32.fromNumber(String.byteLength(str)), buffer)
      Buffer.addString(str, buffer)
    },
    None => Buffer.addUint32(_NONE, buffer)
  }
  Buffer.toBytes(buffer)
}

provide let redirect = (route: String, status: Option<HTTPStatus> = None) => {
  let routeSize = String.byteLength(route)

  let buffer = Buffer.make(
    4 // header
    + 4 + routeSize // route
    + 4 + match (status) { // Option + Status
      Some(status) => 4,
      None => 0,
    }
  )
  Buffer.addUint32(_RESPONSE_REDIRECT, buffer)
  Buffer.addUint32(Uint32.fromNumber(routeSize), buffer)
  Buffer.addString(route, buffer)
  match (status) {
    Some(httpStatus) => {
      Buffer.addUint32(_SOME, buffer)
      Buffer.addUint32(Uint32.fromNumber(getStatusCode(httpStatus)), buffer)
    },
    None => Buffer.addUint32(_NONE, buffer)
  }
  Buffer.toBytes(buffer)
}

provide let uri = (uri: Uri) => {
  let str = Uri.toString(uri)
  let uriStr = Uri.toString(uri)
  let uriStrSize = String.byteLength(uriStr)
  let buffer = Buffer.make(8 + uriStrSize)
  Buffer.addUint32(_RESPONSE_URI, buffer)
  Buffer.addUint32(Uint32.fromNumber(uriStrSize), buffer)
  Buffer.addString(uriStr, buffer)
  Buffer.toBytes(buffer)
}

@unsafe
let getValueTypeTag = (t: WasmI32) => WasmI32.load(t, 0n)

@unsafe
let getTypeHash = (t: WasmI32) => WasmI32.load(t, 4n) >>. 1n

let _NULL = JsonNull
@unsafe
let _NULL_PTR = WasmI32.fromGrain(_NULL)
@unsafe
let _JSON_TYPE = getTypeHash(_NULL_PTR)
ignore(_NULL)

@unsafe
provide let send = (kind: WasmI32) => {
  use WasmI32.{ (+) as (+.) }
  use Tags.{ _GRAIN_STRING_HEAP_TAG, _GRAIN_BYTES_HEAP_TAG, _GRAIN_ADT_HEAP_TAG }
  let tag = getValueTypeTag(kind)

  // Check for a JSON object
  if (tag ==. _GRAIN_ADT_HEAP_TAG) {
    GC.incRef(kind)

    if (_JSON_TYPE ==. getTypeHash(kind)) {
      let jsonValue = WasmI32.toGrain(kind): Json
      let payload = json(jsonValue)
      let ptr = WasmI32.fromGrain(payload)
      let dataPtr = ptr +. _BYTES_DATA_OFFSET
      let size = WasmI32.load(ptr, _BYTES_LEN_OFFSET)
      External.send(dataPtr, size)
      ignore(payload) // <- prevent GC from freeing payload
      return void
    }

    throw InvalidPayloadException
  }

  // Grain String -> Response.text
  if (tag ==. _GRAIN_STRING_HEAP_TAG) {
    GC.incRef(kind)
    let str = WasmI32.toGrain(kind): String
    let payload = text(str)
    let ptr = WasmI32.fromGrain(payload)
    let dataPtr = ptr +. _BYTES_DATA_OFFSET
    let size = WasmI32.load(ptr, _BYTES_LEN_OFFSET)
    External.send(dataPtr, size)
    ignore(payload) // <- prevent GC from freeing payload
    return void
  }

  // Grain Bytes -> Send Raw Payload
  if (tag ==. _GRAIN_BYTES_HEAP_TAG) {
    GC.incRef(kind)
    let ptr = kind +. _BYTES_DATA_OFFSET
    let size = WasmI32.load(kind, _BYTES_LEN_OFFSET)
    External.send(ptr, size)
    return void
  }

 throw InvalidPayloadException
}

provide let ws = (
  open: Option<UpgradeOpenCallback> = None,
  close: Option<UpgradeCloseCallback> = None,
  message: Option<UpgradeMessageCallback> = None,
) => {
  use Uint64.{ (+) as (+..) }
  let wsId = WebSocket.make({ open, close, message })
  let buffer = Buffer.make(12)
  Buffer.addUint32(_RESPONSE_WEB_SOCKET_UPGRADE, buffer)
  Buffer.addUint64(wsId, buffer)
  Buffer.toBytes(buffer)
}

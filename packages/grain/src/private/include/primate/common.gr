module Common

from "bytes" include Bytes
from "uint32" include Uint32
from "result" include Result
from "json" include Json

provide let readUint32 = (offset: Number, payload: Bytes) => {
  let value = Bytes.getUint32(offset, payload)
  (offset + 4, value)
}

provide let readString = (offset: Number, payload: Bytes) => {
  use Uint32.{ toNumber }
  use Bytes.{ slice, toString, getUint32 }
  let (offset, size) = readUint32(offset, payload)
  let size = toNumber(size)
  if (size == 0) {
    (offset, "")
  } else {
    let string = slice(offset, size, payload)
    let string = toString(string)
    let offset = offset + size
    (offset, string)
  }
}

provide let readBytes = (offset: Number, payload: Bytes) => {
  use Uint32.{ toNumber }
  use Bytes.{ slice, toString, getUint32 }
  let (offset, size) = readUint32(offset, payload)
  let size = toNumber(size)
  let bytes = slice(offset, size, payload)
  let offset = offset + size
  (offset, bytes)
}

provide let readJson = (offset: Number, payload: Bytes) => {
  let (offset, str) = readString(offset, payload)
  let json = Result.expect("Expected JSON to parse correctly.", Json.parse(str))
  (offset, json)
}

module Insert
from "json" include Json
from "list" include List
from "option" include Option
from "primate/request" include Request
from "primate/response" include Response
from "primate/store" include Store
from "result" include Result

use Json.{ type Json, module Lenses }
use Request.{ type Request }
use Lenses.{ type Lens, (||>) }
let _User = Result.expect("User Store must exist", Store.store("User"))

let keysLens = (keys: List<String>) => {
    
    {
        get: (value: Json) => match (value) {
            JsonObject(pairs) => {
                let pairs = List.filter(((key, _)) => List.contains(key, keys), pairs)
                Some(JsonObject(pairs))
            },
            _ => None
        },
        set: (_, _) => None
    }: Lens<Json, Json>
}


provide let get = (req: Request) => {
    Result.expect("Operation must succeed", Store.clear(_User))
    let result = Result.expect("Operation must succeed", Store.insert(_User, JsonObject([
        ("age", JsonNumber(30)),
        ("name", JsonString("Donald"))
    ])))

    Option.expect("Operation must succeed", Lenses.get(keysLens(["age", "name"]), result))
}

module Has
from "json" include Json
from "list" include List
from "option" include Option
from "primate/request" include Request
from "primate/response" include Response
from "primate/store" include Store
from "result" include Result

use Json.{ type Json, module Lenses }
use Request.{ type Request }
use Lenses.{ type Lens, (||>) }
let _User = Result.expect("User Store must exist", Store.store("User"))

provide let get = (req: Request) => {
    Result.expect("Operation must succeed", Store.clear(_User))
    let result = Result.expect("Operation must succeed", Store.insert(_User, JsonObject([
        ("age", JsonNumber(30)),
        ("name", JsonString("Donald"))
    ])))

    let id = Option.expect("Operation must succeed", Lenses.get(Lenses.property("id") ||> Lenses.string, result))
    let has = Result.expect("Operation must succeed", Store.has(_User, id))
    JsonObject([
        ("has", JsonBoolean(has))
    ])
}
